# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Test Server Self-Host CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  define_env:
    runs-on: ubuntu-latest
    env:
      BASE_NAME: teamup-backend-test
      DOCKER_HOST: ccr.ccs.tencentyun.com
      DOCKER_NAMESPACE: ziqiang
      DOCKER_COMPOSE_FILE: docker-compose-test.yml

    outputs:
      DOCKER_HOST: ${{ steps.set_env.outputs.DOCKER_HOST }}
      DOCKER_NAMESPACE: ${{ steps.set_env.outputs.DOCKER_NAMESPACE }}
      IMAGE_NAME: ${{ steps.set_env.outputs.IMAGE_NAME }}
      WORKING_DIR: ${{ steps.set_env.outputs.WORKING_DIR }}
      DOCKER_COMPOSE_FILE: ${{ steps.set_env.outputs.DOCKER_COMPOSE_FILE }}
    steps:
      - id: set_env
        run: |
          echo "BASE_NAME=${{ env.BASE_NAME }}" >> $GITHUB_ENV
          echo "DOCKER_HOST=${{ env.DOCKER_HOST }}" >> $GITHUB_OUTPUT
          echo "DOCKER_NAMESPACE=${{ env.DOCKER_NAMESPACE }}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${{ env.BASE_NAME }}" >> $GITHUB_OUTPUT
          echo "WORKING_DIR=~/${{ env.BASE_NAME }}" >> $GITHUB_OUTPUT
          echo "DOCKER_COMPOSE_FILE=${{ env.DOCKER_COMPOSE_FILE }}" >> $GITHUB_OUTPUT

  build_spring:
    runs-on: ubuntu-latest
    needs:
      - define_env
    steps:
      - name: build
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BUILD_SSH_HOST }}
          username: ${{ secrets.BUILD_SSH_USERNAME }}
          password: ${{ secrets.BUILD_SSH_PASSWORD }}
          script: |
            export GRADLE_HOME=/etc/gradle
            export PATH=$GRADLE_HOME/bin:$PATH
            cd ~/Github/teamup_backend
            git pull --force
            gradle buildDevJar
            
            docker login ${{ needs.define_env.outputs.DOCKER_HOST }} --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
            docker build -f docker/spring/Dockerfile -t ${{ needs.define_env.outputs.DOCKER_HOST }}/${{ needs.define_env.outputs.DOCKER_NAMESPACE }}/${{ needs.define_env.outputs.IMAGE_NAME }}:spring .
            docker push ${{ needs.define_env.outputs.DOCKER_HOST }}/${{ needs.define_env.outputs.DOCKER_NAMESPACE }}/${{ needs.define_env.outputs.IMAGE_NAME }}:spring
            docker image prune -f

  deploy:
    runs-on: ubuntu-latest
    needs:
      - define_env
      - build_spring
    steps:
      - name: Restart docker compose containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TEST_SSH_HOST }}
          username: ${{ secrets.TEST_SSH_USERNAME }}
          password: ${{ secrets.TEST_SSH_PASSWORD }}
          script: |
            cd ${{ needs.define_env.outputs.WORKING_DIR }}
            docker login ${{ needs.define_env.outputs.DOCKER_HOST }} --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f